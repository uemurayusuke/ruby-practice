puts 'Hello, World'
# putsは受け取った値を文字列として出力する働きです。
# putsはメソッドで、'Hello,World'は引数になる

puts 5
puts "5"


puts 5 + 3
puts "5 + 3"
puts "5" + "3"
# rubyでは、型の指定がない。
# ""付けてやつは、文字列型として扱われ、囲っていないものは、整数型として
# 扱われる。
# Rubyでは、
# ""を付けたやつは、文字列型
# 囲っていないものは、整数型として扱われる

puts "I" + "am" + "Sam"


# to_s(整数型→文字列型へ変換)

# puts "Samの年齢は" + 27 + "です"
# "Samの年齢は" :　文字列型
# 27 : 整数型
# "です": 文字列型
# 型が違うものを+で繋げる事はできない。
# その場合は、全て同じ型にする必要がある。

puts "Samの年齢は" + 27.to_s + "です"

# to_i(文字列型→整数型へ変換)
# puts 100 + "200"
# これでは、型が異なるため、エラーが発生する。

puts 100 + "200".to_i

# rubyのファイルを実行する時は、rubyファイル名とする事でプログラムを実行する。


# 変数はオブジェクトにつける名前。
# つまり、変数はオブジェクトの名前である。
# つまり、変数とオブジェクトは同じ意味と言って良い。


webcamp = "プログラミング学習"
puts webcamp

webcamp = "オンラインプログラミング学習"
puts webcamp


# 定数には、ルールがある。
# 始まりが大文字、区切りは_を使用する。
# _スネークケースなどのルールs

Pi = 3.14
puts Pi

# Pi = 100
# puts Pi
# 定数は書き換えができないと思った方がいい。

# %は割り算の余りの計算

puts 100
puts 100 + 3
puts 100 - 3
puts 100 * 3
puts 100 / 3
puts 100 % 3

# 以上のように数値を扱うメソッドを演算子という。

# 変数展開
# 変数の中身を展開すること。

name = "A"
weight = 50

puts name + "さんの体重は" + weight.to_s + "kgです"

# このやり方でもいいが、以下は変数展開のやり方を教える。

# '#{変数}'

puts "#{name}さんの体重は#{weight}kgです"
# 変数展開は、元の変数がどのような型であっても、文字列型に変換してくれる。
# つまり、元の変数が文字列型でも整数型でも、とにかく文字列がに変換してくれる。
# 最終的に、文字列型にする。

puts "#{name}さんの体重は#{weight}kgです"


# 変数展開では、変数を使った演算結果なども展開することができます。

name = "A"
weight = 50

puts name + "さんの体重は" + weight.to_s + "kgです"

puts "#{name}さんの体重は#{weight * 2}kgです"

# 変数展開で注意が必要なのは、シングルクォーテーションでは機能しない。
# ダブルクォーテーションで囲った場合のみ機能する。
puts '#{name}さんの体重は#{weight}kgです'
# これは、シングルクォーテーションの為、機能しない。
# 文字列として認識されるだけ。

# 変数展開を用いる時は、ダブルクォーテーションを使わないといけない。




# 配列を使うと、複数のデータをまとめて保存できます。
# 配列には、データ型は問われない。

names = ["Git", "HTML", "CSS"]

puts names[1]

# ハッシュとは、キーと値をセットで保存できるデータの集合
# 配列では、各要素にインデックス番号が振り分けれる。
# 0,1,2のように
# ハッシュでは、任意の値(キー)を割り振ることができる

# つまり、配列では、0,1,2で数字で決められていたが、
# ハッシュでは、任意に決める事ができる。
# つまり、0を太郎、1を二郎、2を花子のように、決める事ができる。

tall = {"太郎"=>185, "二郎"=>170, "花子"=>150}

puts tall["太郎"]
# 太郎を指定すると、185が出力されるということ。



# 5章条件分岐

# rubyでは、falseとnilは偽であり、それ以外は真である。
# このような真と偽を総称して、真偽値という。

if 0
  puts '条件は真です'
end

if nil
  puts '条件は偽です'
end

# つまりnilは偽だから、実行されない。

total = 100
if total < 200
  puts "合計は200未満"
end

# >=は左辺の方が大きい、または等しい。

if total >= 150
  puts "合計は150以上です"
end
# これは実行されない。


hand = "グー"
if hand == "グー"
  puts "出した手はグーです"
end

if hand != "チョキ"
  puts "出した手はチョキではありません"
end


# 論理演算子において、!は否定。

if (hand == "グー") || (hand == "パー")
# if hand == "グー" || hand == "パー"　これでもOK
# しかし、括弧を利用するが、無難。
  # ここでは、||は、またはを意味する。
  puts "出した手はグーまたはパーです"
end


score = 70

if (score >= 50 || score <= 100) && score >= 80
  puts "得点は50点以上または100点以下で、かつ80点以上です。"
end

# これは失敗やな。

if score >= 50 || (score <= 100 && score >= 80)
  puts "得点は50点以上、または80点以上100点以下です。"
end

# 途中で変な所があるとそこで処理が止まってしまうんやな。


# if 条件式
#   処理1
# else
#   処理2
# end

# 返り値が真だったら、処理1を実行。
# 返り値が偽だったら、処理2を実行。

# if 条件式1
#   処理1
# elsif 条件式2
#   処理2
# elsif 条件式3
#   処理3
# else
#   処理4
# end

# 処理1がダメ→処理2へ
# 処理1と処理2がダメ→処理3へ
# 処理1と処理2と処理3がダメ→処理4
# 処理4は終点やから、処理1〜処理3が失敗した時にたどりつく。


apple = "Yamanashi"

if apple == "Aomori"
  puts "このリンゴは青森県産です。"
elsif apple == "Nagano"
  puts "このリンゴ青森県産ではなく、長野県産です。"
else
  puts "このリンゴは青森県産でも長野県産でもありません。"
end


# 比較演算子
# 値を比較して判定する際に使用。
# <,<=,>,>=,==,!=

# 論理演算子
# !,&&,||

total_price = 100

if total_price > 100
  puts "みかんを購入。所持金に余りあり。"
elsif total_price == 100
  puts "みかんを購入。所持金0円。"
else
  puts "みかんを購入することができません。"
end



# 6章 繰り返し処理を学ぼう

# getsはキーボード入力された値を取得するメソッド
# getsを使うと、キー入力待ちの状態になり、文字を入力してEnterキーを押すまで次に進みません。
# getsで入力した値は、文字列として返される。


# puts "キーボードから何か入力してみましょう"
# input_key = gets
# puts "入力された内容は#{input_key}"


# while 条件 do
#   処理
# end

# 繰り返し処理を行いたい時に使う。


dice = 0

while dice != 6 do
  dice = rand(1..6)
  puts dice
end

# diceの初期値は0ではない時に、doを実行する。
# rand(1..6)は、1〜6のランダムに出力される。
# whileの条件が6ではない時に、1〜６のランダムの数字が出力される。
# 逆に6がでれば、止まる


# dice = 0

# while dice != 8 do
#   dice = rand(1..6)
#   puts dice
# end

# この場合、8ではない場合、永遠に繰り返す。
# しかも、rand(1..6)なので、8は一生でない。
# これは無限ループという。



# for式も繰り返し処理を行いたい時に使う。
# whileとの違いは指定したオブジェクトから順に値を取り出しながら繰り返される。

# for 変数 in 範囲、ハッシュ、配列などを指定 do
#   処理
# end

for i in 1..6 do
  puts i
end

# iの中身が1..6って感じがするな。


# (範囲、ハッシュ、配列などを指定).each do |変数|
#   実行する処理
# end

amounts = {"リンゴ"=>2, "イチゴ"=>5, "オレンジ"=>3}
# ハッシュやな

amounts.each do |fruit, amount|
  puts "#{fruit}は#{amount}個です。"
end

# amountsに入ってる。キーと値の3セットをそれぞれ取り出す。
# fruitとamountは任意で定義したって感じやな。


# 繰り返し処理を中断するbreak

i = 1
while i <= 10 do
  if i == 5
    puts "処理を終了します"
    break
  end
  puts i
  i += 1
end

# i += 1は、i = i+1と同じ意味。これで、iに1ずつ足していく式にしてるわけやな。
