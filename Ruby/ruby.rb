puts 'Hello, World'
# putsは受け取った値を文字列として出力する働きです。
# putsはメソッドで、'Hello,World'は引数になる

puts 5
puts "5"


puts 5 + 3
puts "5 + 3"
puts "5" + "3"
# rubyでは、型の指定がない。
# ""付けてやつは、文字列型として扱われ、囲っていないものは、整数型として
# 扱われる。
# Rubyでは、
# ""を付けたやつは、文字列型
# 囲っていないものは、整数型として扱われる

puts "I" + "am" + "Sam"


# to_s(整数型→文字列型へ変換)

# puts "Samの年齢は" + 27 + "です"
# "Samの年齢は" :　文字列型
# 27 : 整数型
# "です": 文字列型
# 型が違うものを+で繋げる事はできない。
# その場合は、全て同じ型にする必要がある。

puts "Samの年齢は" + 27.to_s + "です"

# to_i(文字列型→整数型へ変換)
# puts 100 + "200"
# これでは、型が異なるため、エラーが発生する。

puts 100 + "200".to_i

# rubyのファイルを実行する時は、rubyファイル名とする事でプログラムを実行する。


# 変数はオブジェクトにつける名前。
# つまり、変数はオブジェクトの名前である。
# つまり、変数とオブジェクトは同じ意味と言って良い。


webcamp = "プログラミング学習"
puts webcamp

webcamp = "オンラインプログラミング学習"
puts webcamp


# 定数には、ルールがある。
# 始まりが大文字、区切りは_を使用する。
# _スネークケースなどのルールs

Pi = 3.14
puts Pi

# Pi = 100
# puts Pi
# 定数は書き換えができないと思った方がいい。

# %は割り算の余りの計算

puts 100
puts 100 + 3
puts 100 - 3
puts 100 * 3
puts 100 / 3
puts 100 % 3

# 以上のように数値を扱うメソッドを演算子という。

# 変数展開
# 変数の中身を展開すること。

name = "A"
weight = 50

puts name + "さんの体重は" + weight.to_s + "kgです"

# このやり方でもいいが、以下は変数展開のやり方を教える。

# '#{変数}'

puts "#{name}さんの体重は#{weight}kgです"
# 変数展開は、元の変数がどのような型であっても、文字列型に変換してくれる。
# つまり、元の変数が文字列型でも整数型でも、とにかく文字列がに変換してくれる。
# 最終的に、文字列型にする。

puts "#{name}さんの体重は#{weight}kgです"


# 変数展開では、変数を使った演算結果なども展開することができます。

name = "A"
weight = 50

puts name + "さんの体重は" + weight.to_s + "kgです"

puts "#{name}さんの体重は#{weight * 2}kgです"

# 変数展開で注意が必要なのは、シングルクォーテーションでは機能しない。
# ダブルクォーテーションで囲った場合のみ機能する。
puts '#{name}さんの体重は#{weight}kgです'
# これは、シングルクォーテーションの為、機能しない。
# 文字列として認識されるだけ。

# 変数展開を用いる時は、ダブルクォーテーションを使わないといけない。




# 配列を使うと、複数のデータをまとめて保存できます。
# 配列には、データ型は問われない。

names = ["Git", "HTML", "CSS"]

puts names[1]

# ハッシュとは、キーと値をセットで保存できるデータの集合
# 配列では、各要素にインデックス番号が振り分けれる。
# 0,1,2のように
# ハッシュでは、任意の値(キー)を割り振ることができる

# つまり、配列では、0,1,2で数字で決められていたが、
# ハッシュでは、任意に決める事ができる。
# つまり、0を太郎、1を二郎、2を花子のように、決める事ができる。

tall = {"太郎"=>185, "二郎"=>170, "花子"=>150}

puts tall["太郎"]
# 太郎を指定すると、185が出力されるということ。



# 5章条件分岐

# rubyでは、falseとnilは偽であり、それ以外は真である。
# このような真と偽を総称して、真偽値という。

if 0
  puts '条件は真です'
end

if nil
  puts '条件は偽です'
end

# つまりnilは偽だから、実行されない。

total = 100
if total < 200
  puts "合計は200未満"
end

# >=は左辺の方が大きい、または等しい。

if total >= 150
  puts "合計は150以上です"
end
# これは実行されない。


hand = "グー"
if hand == "グー"
  puts "出した手はグーです"
end

if hand != "チョキ"
  puts "出した手はチョキではありません"
end


# 論理演算子において、!は否定。

if (hand == "グー") || (hand == "パー")
# if hand == "グー" || hand == "パー"　これでもOK
# しかし、括弧を利用するが、無難。
  # ここでは、||は、またはを意味する。
  puts "出した手はグーまたはパーです"
end


score = 70

if (score >= 50 || score <= 100) && score >= 80
  puts "得点は50点以上または100点以下で、かつ80点以上です。"
end

# これは失敗やな。

if score >= 50 || (score <= 100 && score >= 80)
  puts "得点は50点以上、または80点以上100点以下です。"
end

# 途中で変な所があるとそこで処理が止まってしまうんやな。
